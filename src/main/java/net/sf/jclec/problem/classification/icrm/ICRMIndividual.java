package net.sf.jclec.problem.classification.icrm;

import net.sf.jclec.IFitness;
import net.sf.jclec.exprtree.ExprTree;
import net.sf.jclec.problem.classification.exprtree.ExprTreeRuleIndividual;
import net.sf.jclec.problem.classification.rule.Rule;
import net.sf.jclec.problem.util.dataset.IDataset;

import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * ICRM: An Interpretable Classification Rule Mining algorithm
 * 
 * @author Alberto Cano 
 * @author Amelia Zafra
 * @author Sebastian Ventura
 */

public class ICRMIndividual extends ExprTreeRuleIndividual
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -3981819616875133994L;
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Attributes
	/////////////////////////////////////////////////////////////////

	/** Instances covered by the individual */
	
	protected IDataset dataset;
	
	/** The individual is beatable */
	
	protected boolean beatable = true;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor.
	 */
	
	public ICRMIndividual() 
	{
		super();
	}

	/**
	 * Constructor that sets individual genotype and phenotype.
	 * 
	 * @param genotype  Individual genotype
	 */
	
	public ICRMIndividual(ExprTree genotype, Rule phenotype) 
	{
		super(genotype,phenotype);
	}

	/**
	 * Constructor that sets individual genotype, phenotype and fitness.
	 * 
	 * @param genotype  Individual genotype
	 * @param fitness   Individual fitness
	 */

	public ICRMIndividual(ExprTree genotype, Rule phenotype, IFitness fitness) 
	{
		super(genotype, phenotype, fitness);
	}
	
	/**
	 * Constructor that sets individual genotype, phenotype and fitness.
	 * 
	 * @param genotype  Individual genotype
	 * @param fitness   Individual fitness
	 * @param dataset	Individual instances
	 */
	
	public ICRMIndividual(ExprTree genotype, Rule phenotype, IFitness fitness, IDataset dataset) 
	{
		super(genotype, phenotype, fitness);
		this.dataset = dataset;
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * @return the dataset
	 */
	public IDataset getDataset() {
		return dataset;
	}

	/**
	 * @param dataset the dataset to set
	 */
	public void setDataset(IDataset dataset) {
		this.dataset = dataset;
	}
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------- Implementing IIndividual
	/////////////////////////////////////////////////////////////////

	public ICRMIndividual copy() 
	{
		IDataset datasetCopy = null;
		
		if(this.dataset != null)
			datasetCopy = this.dataset.copy();
		
		if(fitness != null)
			return new ICRMIndividual(genotype.copy(), phenotype.copy(), fitness.copy(), datasetCopy);
		else
			return new ICRMIndividual(genotype.copy(), phenotype.copy(), null, datasetCopy);
	}
	
	/////////////////////////////////////////////////////////////////
	// ------------------------- Overwriting java.lang.Object methods
	/////////////////////////////////////////////////////////////////
	
	@Override
	public String toString()
	{
		ToStringBuilder tsb = new ToStringBuilder(this);
		tsb.append("genotype", genotype);
		tsb.append("phenotype", phenotype);
		tsb.append("fitness", fitness);
		return tsb.toString();
	}
}