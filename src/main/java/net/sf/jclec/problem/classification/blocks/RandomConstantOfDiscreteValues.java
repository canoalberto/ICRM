package net.sf.jclec.problem.classification.blocks;

import net.sf.jclec.exprtree.IPrimitive;
import net.sf.jclec.util.intset.Interval;
import net.sf.jclec.util.random.IRandGen;

/**
 * Generate random constant of discrete values
 * 
 * @author Alberto Cano 
 * @author Amelia Zafra
 * @author Sebastian Ventura
 * @author Jose M. Luna 
 * @author Juan Luis Olmo
 */

public class RandomConstantOfDiscreteValues extends ConstantValue 
{
	/////////////////////////////////////////////////////////////////
	// -------------------------------------- Serialization constants
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -3828395821499488081L;

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------------- Propierties
	/////////////////////////////////////////////////////////////////

	/** Random generator */
	
	private IRandGen randgen;

	/** Interval */
	
	private Interval interval;
	
	/////////////////////////////////////////////////////////////////
	// -------------------------------------------------- Constructor
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor
	 */
	
	public RandomConstantOfDiscreteValues() 
	{
		super(null,Double.class);
	}

	/**
	 * Constructor
	 * 
	 * @param randgen the random generator
	 */
	
	public RandomConstantOfDiscreteValues(IRandGen randgen)
	{			
		super(null,Double.class);
		this.randgen = randgen;
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	/**
	 * Sets interval for this operator
	 * 
	 * @param interval interval of constant
	 */
	
	public void setInterval(Interval interval){
		this.interval = interval;
	}

	/**
	 * Initialize interval range for this operator
	 * 
	 */
	
	public void initializeValue(){
		setValue(randgen.choose((int)interval.getLeft(), (int)interval.getRight()+1));
	}

	/**
	 * Gets interval for this operator
	 * 
	 * @return interval interval of constant
	 */
	
	public Interval getInterval(){
		
		return interval;
	}

	/**
	 * Default implementation of instance() return this.
	 * 
	 * {@inheritDoc}
	 */
	
	public IPrimitive instance() 
	{
		RandomConstantOfDiscreteValues aux = new RandomConstantOfDiscreteValues(randgen);
		aux.setInterval(getInterval());
		aux.initializeValue();
		
		return aux;
	}
	
	/**
	 * Default implementation of copy() return this.
	 * 
	 * {@inheritDoc}
	 */
	
	public IPrimitive copy() 
	{
		 RandomConstantOfDiscreteValues aux = new RandomConstantOfDiscreteValues(randgen);
		 aux.setInterval(getInterval());
		 aux.setValue(getValue());
		
		 return aux;
	}
}