package net.sf.jclec.problem.classification.rule;

import java.util.ArrayList;
import java.util.List;

import net.sf.jclec.problem.classification.IClassifier;

/**
 * RuleBase for classification problems
 * 
 * @author Alberto Cano 
 * @author Amelia Zafra
 * @author Sebastian Ventura
 * @author Jose M. Luna 
 * @author Juan Luis Olmo
 */

public abstract class RuleBase implements IClassifier
{	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */

	private static final long serialVersionUID = 1L;
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////

	/** Classification Individual */

	protected List<Rule> rules = new ArrayList<Rule>();

	/** Default Class */
	
	protected double defaultClass;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////

	/**
	 * Default (empty) constructor
	 */
	
	public RuleBase() {
		super();
	}
	
	/**
	 * Constructor
	 * 
	 * @param defaultC Default class
	 */
	
	public RuleBase(double defaultC) {
		super();
		
		this.defaultClass = defaultC;
	}
	
	/**
	 * Constructor 
	 * 
	 * @param rules List of rules
	 * @param defaultC Default class
	 */
	
	public RuleBase(List<Rule> rules, double defaultC) {
		super();
		
		this.rules = rules;
		this.defaultClass = defaultC;
	}
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------- Getting and setting properties
	/////////////////////////////////////////////////////////////////

	/**
	 * Set the classification rules
	 * 
	 * @param rules the rules
	 */
	
	public void setClassificationRules(List<Rule> rules)
	{
		this.rules = rules;
	}
	
	/**
	 * Get the classification rules
	 * 
	 * @return the rules
	 */
	
	public List<Rule> getClassificationRules()
	{
		return rules;
	}
	
	/**
	 * Get the default class
	 * 
	 * @return the default class
	 */
	
	public double getDefaultClass()
	{
		return defaultClass;
	}
	
	/**
	 * Set the default class
	 * 
	 * @param defaultClass the default class
	 */
	
	public void setDefaultClass(double defaultClass)
	{
		this.defaultClass = defaultClass;
	}
	
	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Add a new rule to the rule base
	 * 
	 * @param rule the rule
	 */
	
	public void addClassificationRule(Rule rule)
	{
		if(rules != null)
			rules.add(rule);
		else
		{
			rules = new ArrayList<Rule>();
			rules.add(rule);
		}
	}
	
	/**
	 * Add a new rule to the rule base at a certain position
	 * 
	 * @param index position
	 * @param rule the rule
	 */
	
	public void addClassificationRule(int index, Rule rule)
	{
		if(rules != null)
			rules.add(index, rule);
		else
		{
			rules = new ArrayList<Rule>();
			rules.add(rule);
		}
	}	
	
	/**
	 * Set a new rule within the rule base at a certain position
	 * 
	 * @param index position
	 * @param rule the rule
	 */
	
	public void setClassificationRule(int index, Rule rule)
	{
		if(rules != null)
			rules.set(index, rule);
		else
		{
			rules = new ArrayList<Rule>();
			rules.add(rule);
		}
	}

	/**
	 * Get the i-th rule from the rule base
	 * 
	 * @param index the rule index
	 * @return the rule
	 */
	
	public Rule getClassificationRule(int index)
	{
		return rules.get(index);
	}
	
	 /**
     * Obtain the number of conditions from the rule base
     * 
     * @return number of conditions
     */
	
	public int getConditions()
	{
		int count = 0;
		
		for(Rule rule : rules) 
			count += rule.getConditions();
		
		return count;
	}

	/////////////////////////////////////////////////////////////////
	// ------------------------- Overwriting java.lang.Object methods
	/////////////////////////////////////////////////////////////////
	
	@Override
	public boolean equals(Object other) 
	{
		if (other instanceof RuleBase) {
			RuleBase cother = (RuleBase) other;
			
			if(rules.size() != cother.rules.size())
				return false;
			
			for(int i = 0; i < rules.size(); i++)
				if(!rules.get(i).equals(cother.rules.get(i)))
					return false;
			
			return true;
		}
		else
			return false;
	}
	
	/**
	 * Copy method
	 * 
	 * @return a copy of the classifier
	 */
	
	public abstract RuleBase copy();
}