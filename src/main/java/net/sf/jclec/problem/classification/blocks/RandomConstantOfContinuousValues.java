package net.sf.jclec.problem.classification.blocks;

import net.sf.jclec.exprtree.IPrimitive;
import net.sf.jclec.util.random.IRandGen;
import net.sf.jclec.util.range.Interval;

/**
 * Generate random constant of continuous values
 * 
 * @author Alberto Cano 
 * @author Amelia Zafra
 * @author Sebastian Ventura
 * @author Jose M. Luna 
 * @author Juan Luis Olmo
 */

public class RandomConstantOfContinuousValues extends ConstantValue 				 
{
	/////////////////////////////////////////////////////////////////
	// -------------------------------------- Serialization constants
	/////////////////////////////////////////////////////////////////

	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -3828395821499488081L;

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------------- Propierties
	/////////////////////////////////////////////////////////////////

	/** Random generator */
	
	private IRandGen randgen;

	/** Interval */
	
	private Interval interval;
	
	/** Number of intervals */

	private int nIntervals = -1;

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------------- Constructor
	/////////////////////////////////////////////////////////////////

	/**
	 * Empty constructor
	 */
	
	public RandomConstantOfContinuousValues(){
		super(null,Double.class);
	}

	/**
	 * Constructor
	 * 
	 * @param randgen the random generator
	 */
	
	public RandomConstantOfContinuousValues(IRandGen randgen){
		super(null,Double.class);
		this.randgen = randgen;
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////

	/**
	 * Sets interval for this operator
	 * 
	 * @param interval interval of constant
	 */
	
	public void setInterval(Interval interval){
		
		this.interval = interval;
	}

	/**
	 * Gets interval for this operator
	 * 
	 * @return interval interval of constant
	 */
	
	public Interval getInterval(){
		
		return interval;
	}

	/**
	 * Initialize interval range for this operator
	 * 
	 */
	
	public void initializeValue(){
		setValue(randgen.uniform(interval.getLeft(), interval.getRight()));
	}
	
	/**
	 * Initialize interval range for this operator
	 * 
	 * @param nIntervals number of intervals
	 */
	
	public void initializeValue(int nIntervals){
		this.nIntervals  = nIntervals;
		double left = interval.getLeft();
		double right = interval.getRight();
		double step = (right-left)/(double) nIntervals;
		setValue(left + step * randgen.choose(0, nIntervals));
	}

	/**
	 * Default implementation of instance() return this.
	 * 
	 * {@inheritDoc}
	 */
	
	public IPrimitive instance() 
	{
		 RandomConstantOfContinuousValues aux = new RandomConstantOfContinuousValues(randgen);
		 aux.setInterval(getInterval());
		 
		 if(this.nIntervals != -1)
			 aux.initializeValue(nIntervals);
		 else
			 aux.initializeValue();
		 
		 aux.setValue(getValue());
		 
		return aux;
	}
	
	/**
	 * Default implementation of copy() return this.
	 * 
	 * {@inheritDoc}
	 */
	
	public IPrimitive copy() 
	{
		 RandomConstantOfContinuousValues aux = new RandomConstantOfContinuousValues(randgen);
		 aux.setInterval(getInterval());
		 aux.setValue(getValue());
		
		return aux;
	}
}